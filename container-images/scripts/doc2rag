#!/usr/bin/env python3
import json
import argparse
import hashlib
import os
import sys
import uuid
from pathlib import Path
import time
import threading
import itertools

import docling
from docling.document_converter import DocumentConverter, PdfFormatOption
from docling.datamodel.base_models import InputFormat
from docling.datamodel.pipeline_options import PdfPipelineOptions

from docling_core.types.doc import DoclingDocument

# Docling Setup (Turn off OCR for reduced RAM usage and increased speed)
pipeline_options = PdfPipelineOptions()
pipeline_options.do_ocr = False
doc_converter = DocumentConverter(
        format_options={
            InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)
        }
    )

# Global Vars
EMBED_MODEL = os.getenv("EMBED_MODEL", "jinaai/jina-embeddings-v2-small-en")
SPARSE_MODEL = os.getenv("SPARSE_MODEL", "prithivida/Splade_PP_en_v1")
COLLECTION_NAME = "rag"

class Converter:
    """A Class designed to handle all document conversions using Docling"""

    def __init__(self, output, targets):
        self.doc_converter = doc_converter
        self.targets = []
        for target in targets:
            self.add(target)
        self.output = output

    def add(self, file_path):
        if os.path.isdir(file_path):
            self.walk(file_path)  # Walk directory and process all files
        else:
            self.targets.append(file_path)  # Process the single file
    
    def show_progress(self, message, stop_event):
            spinner = itertools.cycle([".", "..", "..."])
            while not stop_event.is_set():
                sys.stdout.write(f"\r{message} {next(spinner)}   ")
                sys.stdout.flush()
                time.sleep(0.5)
            sys.stdout.write("\r" + " " * 50 + "\r")

    def convert(self):
        output_dir = Path(self.output)
        output_dir.mkdir(parents=True, exist_ok=True)

        for target in self.targets:
            name = self.get_name(str(target))

            stop_event = threading.Event()
            progress_thread = threading.Thread(target=self.show_progress, args=(f"Converting {name}.pdf to .json", stop_event))
            progress_thread.start()
        
            try:
                result = self.doc_converter.convert(target)
            finally:
                stop_event.set()
                progress_thread.join()

            doc = result.document.export_to_dict()
            output_path = output_dir / f"{name}.json"
            with Path(output_path).open("w") as fp:
                fp.write(json.dumps(doc))
            print(f"Finished converting {name}.pdf to {name}.json")
    
    def get_name(self, path):
        file_name = Path(path).stem
        return file_name

    def walk(self, path):
        for root, dirs, files in os.walk(path, topdown=True):
            if len(files) == 0:
                continue
            for f in files:
                file = os.path.join(root, f)
                if os.path.isfile(file):
                    self.targets.append(file)

def load():
    # Dummy code to preload models
    converter = DocumentConverter()
    converter.initialize_pipeline(InputFormat.PDF)

parser = argparse.ArgumentParser(
    prog="docling",
    description="process source files into RAG vector database",
)

parser.add_argument("target", nargs="?", help="Target database")
parser.add_argument("source", nargs="*", help="Source files")

def perror(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def eprint(e, exit_code):
    perror("Error: " + str(e).strip("'\""))
    sys.exit(exit_code)

try:
    args = parser.parse_args()
    if args.target == "load":
        load()
    else:
        converter = Converter(args.target, args.source)
        converter.convert()
except docling.exceptions.ConversionError as e:
    eprint(e, 1)
except FileNotFoundError as e:
    eprint(e, 1)
except ValueError as e:
    eprint(e, 1)
except KeyboardInterrupt:
    pass
