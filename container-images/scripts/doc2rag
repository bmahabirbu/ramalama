#!/usr/bin/env python3
import json
import argparse
import hashlib
import os
import sys
import uuid
from pathlib import Path
import time
import threading
import itertools

import docling
from docling.chunking import HybridChunker
from docling.document_converter import DocumentConverter, PdfFormatOption
from docling.datamodel.base_models import InputFormat
from docling.datamodel.pipeline_options import PdfPipelineOptions

# Global Vars
EMBED_MODEL = os.getenv("EMBED_MODEL", "jinaai/jina-embeddings-v2-small-en")
SPARSE_MODEL = os.getenv("SPARSE_MODEL", "prithivida/Splade_PP_en_v1")
COLLECTION_NAME = "rag"

class Converter:
    """A Class designed to handle all document conversions using Docling"""

    def __init__(self, output, targets, ocr):
        # Docling Setup (Turn off OCR (image processing) for drastically reduced RAM usage and big speed increase)
        pipeline_options = PdfPipelineOptions()
        pipeline_options.do_ocr = ocr
        self.doc_converter = DocumentConverter(
                format_options={
                    InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)
                }
            )
        self.targets = []
        for target in targets:
            self.add(target)
        self.output = output

    def add(self, file_path):
        if os.path.isdir(file_path):
            self.walk(file_path)  # Walk directory and process all files
        else:
            self.targets.append(file_path)  # Process the single file
    
    def show_progress(self, message, stop_event):
            spinner = itertools.cycle([".", "..", "..."])
            while not stop_event.is_set():
                sys.stdout.write(f"\r{message} {next(spinner)}   ")
                sys.stdout.flush()
                time.sleep(0.5)
            sys.stdout.write("\r" + " " * 50 + "\r")

    def convert(self):
        results = []
        names = []

        for target in self.targets:
            name = self.get_name(str(target))
            names.append(name)
            stop_event = threading.Event()
            progress_thread = threading.Thread(target=self.show_progress, args=(f"Converting {name}.pdf to json", stop_event))
            progress_thread.start()
        
            try:
                results.append(self.doc_converter.convert(target))
            finally:
                stop_event.set()
                progress_thread.join()
            
            print(f"Finished converting {name}.pdf to {name}.json")

            self.export_json(results, names)
    
    def export_json(self, docs, names):
        print("Exporting to JSON")
        output_dir = Path(self.output)
        output_dir.mkdir(parents=True, exist_ok=True)

        for file, name in zip(docs, names):
            doc = file.document.export_to_dict()
            output_path = output_dir / f"{name}.json"
            with output_path.open("w") as fp:
                fp.write(json.dumps(doc))
                    
    def get_name(self, path):
        return Path(path).stem

    def walk(self, path):
        for root, dirs, files in os.walk(path, topdown=True):
            if len(files) == 0:
                continue
            for f in files:
                file = os.path.join(root, f)
                if os.path.isfile(file):
                    self.targets.append(file)
def load():
    # Dummy code to preload models
    converter = DocumentConverter()
    converter.initialize_pipeline(InputFormat.PDF)

parser = argparse.ArgumentParser(
    prog="docling",
    description="process source files into RAG vector database",
)

parser.add_argument("target", nargs="?", help="Target database")
parser.add_argument("source", nargs="*", help="Source files")
parser.add_argument("--ocr", action='store_true', help="Enable embedded image text extraction from PDF (Increases RAM Usage significantly)")

def perror(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def eprint(e, exit_code):
    perror("Error: " + str(e).strip("'\""))
    sys.exit(exit_code)

try:
    args = parser.parse_args()
    if args.target == "load":
        load()
    else:
        converter = Converter(args.target, args.source, args.ocr)
        converter.convert()
except docling.exceptions.ConversionError as e:
    eprint(e, 1)
except FileNotFoundError as e:
    eprint(e, 1)
except ValueError as e:
    eprint(e, 1)
except KeyboardInterrupt:
    pass